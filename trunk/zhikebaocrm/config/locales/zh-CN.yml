zh-CN:
  date:
    formats:
      # Use the strftime parameters for formats.
      # When no format has been given, it uses default.
      # You can provide other formats here if you like!
      default: "%Y-%m-%d"
      short: "%b %d"
      long: "%B %d, %Y"
      
    day_names: [周日, 周一, 周二, 周三, 周四, 周五, 周六]
    abbr_day_names: [日, 一, 二, 三, 四, 五, 六]
      
    # Don't forget the nil at the beginning; there's no such thing as a 0th month
    month_names: [~, 一月, 二月, 三月, 四月, 五月, 六月, 七月, 八月, 九月, 十月, 十一月, 十二月]
    abbr_month_names: [~, 一, 二, 三, 四, 五, 六, 七, 八, 九, 十, 十一, 十二]
    # Used in date_select and datime_select.
    order: [ :年, :月, :日 ]

  time:
    formats:
      default: "%a, %d %b %Y %H:%M:%S %z"
      short: "%d %b %H:%M"
      long: "%B %d, %Y %H:%M"
    am: "上午"
    pm: "下午"
      
# Used in array.to_sentence.
  support:
    array:
      words_connector: ", "
      two_words_connector: " 和 "
      last_word_connector: ", 和 "

  number:
    # Used in number_with_delimiter()
    # These are also the defaults for 'currency', 'percentage', 'precision', and 'human'
    format:
      # Sets the separator between the units, for more precision (e.g. 1.0 / 2.0 == 0.5)
      separator: "."
      # Delimets thousands (e.g. 1,000,000 is a million) (always in groups of three)
      delimiter: ","
      # Number of decimals, behind the separator (the number 1 with a precision of 2 gives: 1.00)
      precision: 3
  
    # Used in number_to_currency()
    currency:
      format:
        # Where is the currency sign? %u is the currency unit, %n the number (default: $5.00)
        format: "%u%n"
        unit: "￥"
        # These three are to override number.format and are optional
        separator: "."
        delimiter: ","
        precision: 2
  
    # Used in number_to_percentage()
    percentage:
      format:
        # These three are to override number.format and are optional
        # separator: 
        delimiter: ""
        # precision: 
  
    # Used in number_to_precision()
    precision:
      format:
        # These three are to override number.format and are optional
        # separator:
        delimiter: ""
        # precision:
  
    # Used in number_to_human_size()
    human:
      format:
        # These three are to override number.format and are optional
        # separator: 
        delimiter: ""
        precision: 1
      storage_units:
        # Storage units output formatting.
        # %u is the storage unit, %n is the number (default: 2 MB)
        format: "%n %u"
        units:
          byte:
            one:   "Byte"
            other: "Bytes"
          kb: "KB"
          mb: "MB"
          gb: "GB"
          tb: "TB"
  
  # Used in distance_of_time_in_words(), distance_of_time_in_words_to_now(), time_ago_in_words()
  datetime:
    distance_in_words:
      half_a_minute: "半分钟"
      less_than_x_seconds:
        one:   "一秒内"
        other: "{{count}} 秒内"
      x_seconds:
        one:   "1 秒"
        other: "{{count}} 秒"
      less_than_x_minutes:
        one:   "一分钟内"
        other: "{{count}} 分钟内"
      x_minutes:
        one:   "1 分钟"
        other: "{{count}} 分钟"
      about_x_hours:
        one:   "大约1小时"
        other: "大约 {{count}}小时"
      x_days:
        one:   "1 天"
        other: "{{count}} 天"
      about_x_months:
        one:   "大约 1 个月"
        other: "大约 {{count}} 个月"
      x_months:
        one:   "1 月"
        other: "{{count}} 月"
      about_x_years:
        one:   "大约 1 年"
        other: "大约 {{count}} 年"
      over_x_years:
        one:   "超过 1 年"
        other: "超过 {{count}} 年"
    prompts:
      year:   "年"
      month:  "月"
      day:    "日"
      hour:   "时"
      minute: "分"
      second: "秒"

  activerecord:
    errors:
      template:
        header:    
          one:    "保存 {{model}} 时出现 1 个错误"
          other:  "保存 {{model}} 时出现 {{count}} 个错误 "
        # The variable :count is also available
        body: "下列字段出现错误:"
  
      # The values :model, :attribute and :value are always available for interpolation
      # The value :count is available when applicable. Can be used for pluralization.
      messages:
        inclusion: "没有被包含在列表中"
        exclusion: "不能使用"
        invalid: "不正确"
        confirmation: "不一致"
        accepted: "必须接受"
        empty: "不能为空"
        blank: "不能为空"
        too_long: "内容太长 (最多 {{count}} 个字符)"
        too_short: "内容太短 (最少 {{count}} 个字符)"
        wrong_length: "长度不正确 ( {{count}} 个字符)"
        taken: "已经被使用"
        not_a_number: "不是数字"
        greater_than: "必须大于 {{count}}"
        greater_than_or_equal_to: "必须大于或等于 {{count}}"
        equal_to: "必须等于 {{count}}"
        less_than: "必须小于 {{count}}"
        less_than_or_equal_to: "必须小于或等于 {{count}}"
        odd: "必须是奇数"
        even: "必须是偶数"
        # Append your own errors here or at the model/attributes scope.
    
      # You can define own errors for models or model attributes.
      # The values :model, :attribute and :value are always available for interpolation.
      #
      # For example,
      #   models:
      #     user:
      #       blank: "This is a custom blank message for {{model}}: {{attribute}}"
      #       attributes:
      #         login:
      #           blank: "This is a custom blank message for User login"
      # Will define custom blank validation message for User model and 
      # custom blank validation message for login attribute of User model.
      #models:
    
    # Translate model names. Used in Model.human_name().
    #models:
      # For example,
      #   user: "Dude"
      # will translate User model name to "Dude"
    
    # Translate model attribute names. Used in Model.human_attribute_name(attribute).
    #attributes:
      # For example,
      #   user:
      #     login: "Handle"
      # will translate User attribute "login" as "Handle"
    
    