/*
 * Generated by ActionName
 * Template path: templates/java/JavaClass.vtl
 */
package com.xyz.trade.server.action;
import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.output.XMLOutputter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.taobao.api.model.Trade;
import com.xyz.order.model.Shipping;
import com.xyz.order.service.IShippingServ;
import com.xyz.trade.service.ITradeService;
import com.xyz.util.DateUtil;
import com.xyz.util.Page;
import com.xyz.util.QueryDate;
import com.xyz.util.StringUtil;

/** 
 * ActionName
 * 创建日期: 08-28-2009
 * 
 * XDoclet definition:
 * 作者:紫色海洋 QQ:7733558
 */
@Controller("/alreadyOrder")
public class AlreadyOrderAction  {
	@Autowired
	ITradeService tradeFacade;
	@Autowired @Qualifier("shippingServ")
	IShippingServ shippingFacade;
	
	@RequestMapping("/alreadyOrder/forward")
	public String forward() {
		return "/send/alreadyOrder";
	}
	
	@RequestMapping("/alreadyOrder/data")
	public String data(HttpServletRequest request, HttpServletResponse response) throws IOException, ParseException {
		List<String> fields = StringUtil.toStringArray(request.getParameter("fields"));
		List<String> querys = StringUtil.toStringArray(request.getParameter("query"));
		Integer start = Integer.parseInt(request.getParameter("start"));
		Integer limit = Integer.parseInt(request.getParameter("limit"));
		
		Integer total = null;
		QueryDate queryDate = new QueryDate();// 间隔日期查询必须
		Page<Trade> page = new Page<Trade>(limit);
		page.setStart(start);
		if (fields.size() == 0) {
			page = tradeFacade.findAll(page);
			total = tradeFacade.findManyByPropertySize(null, null);
		} else {
			Map<String, Object> map = new HashMap<String, Object>();
			for (int i = 0; i < fields.size(); i++) {
				String field = fields.get(i).trim();
				String query = querys.get(i).trim();
				if (StringUtil.isNullOrEmpty(query)) {
					if (field.equals("start_created")) {
						queryDate.setStartDate(query);
					} else if (field.equals("end_created")) {
						queryDate.setEndDate(query);
					} else
						map.put(field, query);
				}
			}
			map.put("consign_time", queryDate);
			map.put("status", "WAIT_BUYER_CONFIRM_GOODS");
			page = tradeFacade.findManyByProperty(map.keySet().toArray(), map.values().toArray(), page);
			total = tradeFacade.findManyByPropertySize(map.keySet().toArray(), map.values().toArray());
		}
		if (page != null && page.getResult()!=null && page.getResult().size() > 0) {
			Document doc = new Document();
			Element rootElement = new Element("rows");
			doc.addContent(rootElement);
			Element totalElement = new Element("total");
			totalElement.setText(total.toString());
			rootElement.addContent(totalElement);
			for (Trade trade : page.getResult()) {
				Element childElement = new Element("record");
				Element id = new Element("id");
				id.setText(trade.getTid());
				childElement.addContent(id);

				Element buyerNick = new Element("buyer_nick");
				buyerNick.setText(trade.getBuyerNick());
				childElement.addContent(buyerNick);

				Element status = new Element("status");
				status.setText(trade.getStatus());
				childElement.addContent(status);

				List<Shipping> list = shippingFacade.findByProperty("bossiniTrade", trade);
				Shipping shipping = list.get(0);
				
				Element payment = new Element("companyCode");
				payment.setText(shipping.getCompanyCode());
				childElement.addContent(payment);

				Element postFee = new Element("outSid");
				postFee.setText(shipping.getOutSid());
				childElement.addContent(postFee);

				Element payTime = new Element("consignTime");
				payTime.setText(DateUtil.format(trade.getConsignTime(), "yyyy-MM-dd HH:mm"));
				childElement.addContent(payTime);

				rootElement.addContent(childElement);
			}
			XMLOutputter xml = new XMLOutputter();
			response.setCharacterEncoding("UTF-8");
			response.setContentType("text/xml");
			response.getWriter().write(xml.outputString(doc));
			return null;
		}
		return null;
	}
}
