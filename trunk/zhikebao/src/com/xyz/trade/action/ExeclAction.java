/*
 * Generated by ActionName
 * Template path: templates/java/JavaClass.vtl
 */
package com.xyz.trade.action;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.xyz.order.service.IOrderService;
import com.xyz.trade.model.TradeModel;
import com.xyz.trade.service.ITradeService;
import com.xyz.util.Page;
import com.xyz.util.QueryDate;
import com.xyz.util.StringUtil;

/**
 * 创建日期: 09-06-2009
 * 
 * XDoclet definition:
 * 
 * 作者:文浪  
 */
@Controller("/execl")
public class ExeclAction {
	@Autowired
	private ITradeService tradeFacade ;
	@Autowired @Qualifier("orderServ")
	private IOrderService orderFacade ;
	
	/**
	 * 导出部份销售清单
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	/*@RequestMapping("/execl/shopPickingByTid.do")
	public String shopPickingByTid(HttpServletRequest request, HttpServletResponse response) {
		String[] tids = request.getParameter("ids").split(",");
		List<ShopPicking> list = new ArrayList<ShopPicking>();
		for (String tid : tids) {
			list.add(this.shopPicekingHelp(tid));
		}
		request.setAttribute("list", list);
		return "/excel/shoppicking";
	}*/
	@RequestMapping("/execl/shopPickingAll.do")
	public String shopPickingAll(HttpServletRequest request, HttpServletResponse response) {
		List<String> fields = StringUtil.toStringArray(request.getParameter("fields"));
		List<String> querys = StringUtil.toStringArray(request.getParameter("query"));
		QueryDate queryDate = new QueryDate();// 间隔日期查询必须
		Page<TradeModel> page = new Page<TradeModel>(20);
		if (fields.size() == 0) {
			page = tradeFacade.findByStatus("WAIT_SELLER_SEND_GOODS",page);
		} else {
			Map<String, Object> map = new HashMap<String, Object>();
			for (int i = 0; i < fields.size(); i++) {
				String field = fields.get(i).trim();
				String query = querys.get(i).trim();
				if (StringUtil.isNullOrEmpty(query)) {
					if (field.equals("start_created")) {
						queryDate.setStartDate(query);
					} else if (field.equals("end_created")) {
						queryDate.setEndDate(query);
					} else if (field.equals("shipping_type")) {
						if (!query.equals("all")) {
							map.put(field, query);
						}
					} else
						map.put(field, query);
				}
			}
			map.put("status", "WAIT_SELLER_SEND_GOODS");
			map.put("pay_time", queryDate);
			page = tradeFacade.findManyByProperty(map.keySet().toArray(), map.values().toArray(),page);
		}

		/*List<ShopPicking> list = new ArrayList<ShopPicking>();
		if (objectList != null && objectList.size() > 0) {
			for (BossiniTrade trade : objectList) {
				list.add(this.shopPicekingHelp(trade.getTid()));
			}
		}
		request.setAttribute("list", list);*/
		return "/excel/shoppicking";
	}

	//@RequestMapping("/execl/expPrinterByTid.do")
	/*public String expPrinterByTid( HttpServletRequest request, HttpServletResponse response) {
		String[] tids = request.getParameter("ids").split(",");
		List<ExpPrinter> list = new ArrayList<ExpPrinter>();
		for (String tid : tids) {
			BossiniTrade trade = tradeFacade.findById(tid);
			ExpPrinter expPrinter = new ExpPrinter();
			expPrinter.setReceiverName(trade.getReceiverName());
			expPrinter.setReceiverMobile(trade.getReceiverMobile());
			expPrinter.setReceiverPhone(trade.getReceiverPhone());
			expPrinter.setReceiverZip(trade.getReceiverZip());
			expPrinter.setReceiverAddress(trade.getReceiverState() + " " + trade.getReceiverCity() + " " + trade.getReceiverDistrict() + " " + trade.getReceiverAddress());
			list.add(expPrinter);
		}
		request.setAttribute("list", list);
		return "/excel/expPrinter";
	}*/

	@RequestMapping("/execl/expPrinterByAll.do")
	public String expPrinterByAll(HttpServletRequest request, HttpServletResponse response) {
		List<String> fields = StringUtil.toStringArray(request.getParameter("fields"));
		List<String> querys = StringUtil.toStringArray(request.getParameter("query"));
		Page<TradeModel> page = new Page<TradeModel>(20);
		QueryDate queryDate = new QueryDate();// 间隔日期查询必须
		if (fields.size() == 0) {
			page = tradeFacade.findByStatus("WAIT_SELLER_SEND_GOODS",page);
		} else {
			Map<String, Object> map = new HashMap<String, Object>();
			for (int i = 0; i < fields.size(); i++) {
				String field = fields.get(i).trim();
				String query = querys.get(i).trim();
				if (StringUtil.isNullOrEmpty(query)) {
					if (field.equals("start_created")) {
						queryDate.setStartDate(query);
					} else if (field.equals("end_created")) {
						queryDate.setEndDate(query);
					} else if (field.equals("shipping_type")) {
						if (!query.equals("all")) {
							map.put(field, query);
						}
					} else
						map.put(field, query);
				}
			}
			map.put("status", "WAIT_SELLER_SEND_GOODS");
			map.put("pay_time", queryDate);
			page = tradeFacade.findManyByProperty(map.keySet().toArray(), map.values().toArray(),page);
		}

		/*List<ExpPrinter> list = new ArrayList<ExpPrinter>();
		if (objectList != null && objectList.size() > 0) {
			for (BossiniTrade trade : objectList) {
				ExpPrinter expPrinter = new ExpPrinter();
				expPrinter.setReceiverName(trade.getReceiverName());
				expPrinter.setReceiverMobile(trade.getReceiverMobile());
				expPrinter.setReceiverPhone(trade.getReceiverPhone());
				expPrinter.setReceiverZip(trade.getReceiverZip());
				expPrinter.setReceiverAddress(trade.getReceiverState() + " " + trade.getReceiverCity() + " " + trade.getReceiverDistrict() + " " + trade.getReceiverAddress());
				list.add(expPrinter);
			}
		}
		request.setAttribute("list", list);*/
		return "/excel/expPrinter";
	}
	/*
	public ShopPicking shopPicekingHelp(String tid) {
		String sqlString = "select plu,colorcode,name,price," + " sum(case when sizename = '24' or sizename = '100' or sizename = 'XS' then num else 0 end) as num1,"
				+ " sum(case when sizename = '25' or sizename = '110' then num else 0 end) as num2,"
				+ " sum(case when sizename = '26' or sizename = '120' or sizename = 'S' then num else 0 end) as num3,"
				+ " sum(case when sizename = '27' or sizename = '130' then num else 0 end) as num4,"
				+ " sum(case when sizename = '28' or sizename = '140' or sizename = 'M' then num else 0 end) as num5,"
				+ " sum(case when sizename = '29' or sizename = '150' then num else 0 end) as num6,"
				+ " sum(case when sizename = '30' or sizename = '160' or sizename = 'L' then num else 0 end) as num7," + " sum(case when sizename = '31' then num else 0 end) as num8,"
				+ " sum(case when sizename = '32' or sizename = 'XL' then num else 0 end) as num9," + " sum(case when sizename = '33' then num else 0 end) as num10,"
				+ " sum(case when sizename = '34' or sizename = 'XXL' then num else 0 end) as num11," + " sum(case when sizename = '35' then num else 0 end) as num12,"
				+ " sum(case when sizename = '36' or sizename = '均码' then num else 0 end) as num13 " + " from BossiniOrder where tid='" + tid
				+ "' and refund_status='NO_REFUND' group by plu,colorcode,name,price";
		ShopPicking shopPicking = new ShopPicking();
		BossiniTrade trade = tradeFacade.findById(tid);
		shopPicking.setTid(trade.getTid());
		shopPicking.setBuyerNick(trade.getBuyerNick());
		shopPicking.setPostFee(trade.getPostFee());
		shopPicking.setReceiverAddress(trade.getReceiverState() + trade.getReceiverCity() + trade.getReceiverDistrict() + trade.getReceiverAddress());
		shopPicking.setReceiverMobile(trade.getReceiverMobile());
		shopPicking.setReceiverPhone(trade.getReceiverPhone());
		shopPicking.setReceiverName(trade.getReceiverName());
		shopPicking.setReceiverZip(trade.getReceiverZip());
		shopPicking.setShippingType(trade.getShippingType());
		List<Object[]> objList = orderFacade.query(sqlString);
		
		List<ShopPickingItem> itemList = new ArrayList<ShopPickingItem>();
		
		ShopPickingItem itemTotal = new ShopPickingItem();
		itemTotal.setPlu("合计");
		itemTotal.setPrice(0.00);
		itemTotal.setNum(0);
		itemTotal.setNum1(0);
		itemTotal.setNum10(0);
		itemTotal.setNum11(0);
		itemTotal.setNum12(0);
		itemTotal.setNum13(0);
		itemTotal.setNum2(0);
		itemTotal.setNum3(0);
		itemTotal.setNum4(0);
		itemTotal.setNum5(0);
		itemTotal.setNum6(0);
		itemTotal.setNum7(0);
		itemTotal.setNum8(0);
		itemTotal.setNum9(0);

		for (Object[] objs : objList) {
			// 获取SQL值
			Integer num1 = (Integer) objs[4];
			Integer num2 = (Integer) objs[5];
			Integer num3 = (Integer) objs[6];
			Integer num4 = (Integer) objs[7];
			Integer num5 = (Integer) objs[8];
			Integer num6 = (Integer) objs[9];
			Integer num7 = (Integer) objs[10];
			Integer num8 = (Integer) objs[11];
			Integer num9 = (Integer) objs[12];
			Integer num10 = (Integer) objs[13];
			Integer num11 = (Integer) objs[14];
			Integer num12 = (Integer) objs[15];
			Integer num13 = (Integer) objs[16];
			Double price = new BigDecimal(Double.parseDouble(objs[3].toString())).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
			// 计算总数量
			Integer num = num1 + num2 + num3 + num4 + num5 + num6 + num7 + num8 + num9 + num10 + num11 + num12 + num13;
			// 合计
			itemTotal.setPrice(itemTotal.getPrice() + num * price);
			// 单条记录
			ShopPickingItem item = new ShopPickingItem();
			item.setPlu(objs[0]==null?"":objs[0].toString());
			item.setColorCode(objs[1]==null?"":objs[1].toString());
			item.setName(objs[2]==null?"":objs[2].toString());
			item.setPrice(price);
			item.setNum(num);
			item.setNum1(num1);
			item.setNum10(num10);
			item.setNum11(num11);
			item.setNum12(num12);
			item.setNum13(num13);
			item.setNum2(num2);
			item.setNum3(num3);
			item.setNum4(num4);
			item.setNum5(num5);
			item.setNum6(num6);
			item.setNum7(num7);
			item.setNum8(num8);
			item.setNum9(num9);
			itemList.add(item);
		}
		
		if(objList.size() < 6){
			for(int i=0;i<6-objList.size();i++){
				ShopPickingItem item = new ShopPickingItem();
				itemList.add(item);
			}
		}
		// 将合计放置最后
		itemList.add(itemTotal);
		shopPicking.setItem(itemList);
		return shopPicking;
	}*/
}