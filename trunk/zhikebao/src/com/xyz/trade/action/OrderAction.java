/*
 * Generated by ActionName
 * Template path: templates/java/JavaClass.vtl
 */
package com.xyz.trade.action;

import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.output.XMLOutputter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.taobao.api.TaobaoApiException;
import com.taobao.api.model.Order;
import com.taobao.api.model.Trade;
import com.xyz.order.service.IOrderService;
import com.xyz.system.service.IUserService;
import com.xyz.trade.model.OrderModel;
import com.xyz.trade.model.TradeModel;
import com.xyz.trade.service.ITradeService;
import com.xyz.util.DateUtil;
import com.xyz.util.Page;
import com.xyz.util.QueryDate;
import com.xyz.util.StringUtil;

/**
 * 创建日期: 08-20-2009
 * XDoclet definition:
 * 
 * 作者:val
 */
@Controller
public class OrderAction {
	@Autowired @Qualifier("taobaoUserServ")
	IUserService facade;
	@Autowired
	private ITradeService tradeFacade ;
	@Autowired @Qualifier("orderServ")
	private IOrderService orderFacade;
	

	@RequestMapping("/order/forward.do")
	public String forward(HttpServletRequest request, HttpServletResponse response) {
		return "order";
	}
	@RequestMapping("/order/data.do")
	public String data(HttpServletRequest request, HttpServletResponse response) throws IOException, ParseException {
		List<String> fields = StringUtil.toStringArray(request.getParameter("fields"));
		List<String> querys = StringUtil.toStringArray(request.getParameter("query"));
		Integer start = Integer.parseInt(request.getParameter("start"));
		Integer limit = Integer.parseInt(request.getParameter("limit"));

		List<Trade> objectList = null;
		Integer total = null;
		QueryDate queryDate = new QueryDate();// 间隔日期查询必须
		Page<TradeModel> page = new Page<TradeModel>(limit);
		page.setStart(start);
		if (fields.size() == 0) {
			page = tradeFacade.findAll(page);
			total = tradeFacade.findManyByPropertySize(null, null);
		} else {
			Map<String, Object> map = new HashMap<String, Object>();
			for (int i = 0; i < fields.size(); i++) {
				String field = fields.get(i).trim();
				String query = querys.get(i).trim();
				if (StringUtil.isNullOrEmpty(query)) {
					if (field.equals("start_created")) {
						queryDate.setStartDate(query);
					} else if (field.equals("end_created")) {
						queryDate.setEndDate(query);
					} else if (field.equals("status")) {
						if (!query.equals("all")) {
							map.put(field, query);
						}
					} else
						map.put(field, query);
				}
			}
			map.put("pay_time", queryDate);
			page = tradeFacade.findManyByProperty(map.keySet().toArray(), map.values().toArray(), page);
			total = tradeFacade.findManyByPropertySize(map.keySet().toArray(), map.values().toArray());
		}
		if (objectList != null && objectList.size() > 0) {
			Document doc = new Document();
			Element rootElement = new Element("rows");
			doc.addContent(rootElement);
			Element totalElement = new Element("total");
			totalElement.setText(total.toString());
			rootElement.addContent(totalElement);
			for (Trade trade : objectList) {
				Element childElement = new Element("record");
				Element id = new Element("id");
				id.setText(trade.getTid());
				childElement.addContent(id);

				Element buyerNick = new Element("buyer_nick");
				buyerNick.setText(trade.getBuyerNick());
				childElement.addContent(buyerNick);

				Element status = new Element("status");
				status.setText(trade.getStatus());
				childElement.addContent(status);

				Element payment = new Element("payment");
				payment.setText(trade.getPayment().toString());
				childElement.addContent(payment);

				Element postFee = new Element("post_fee");
				postFee.setText(trade.getPostFee().toString());
				childElement.addContent(postFee);

				Element payTime = new Element("pay_time");
				payTime.setText(DateUtil.format(trade.getPayTime(), "yyyy-MM-dd HH:mm"));
				childElement.addContent(payTime);

				rootElement.addContent(childElement);
			}
			XMLOutputter xml = new XMLOutputter();
			response.setCharacterEncoding("UTF-8");
			response.setContentType("text/xml");
			response.getWriter().write(xml.outputString(doc));
			return null;
		}
		return null;
	}
	/**
	 * 关闭定单
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	@RequestMapping("/order/colse.do")
	public String colse(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String tid = request.getParameter("tid");
		TradeModel trade = tradeFacade.findById(tid);
		trade.setStatus("TRADE_CLOSED");
		tradeFacade.update(trade);
		Page<OrderModel> page = new Page<OrderModel>(20);
		page = orderFacade.findByProperty("tid", trade.getTid(), page);
		if (page.getResult() != null && page.getResult().size() > 0) {
			for (OrderModel obj : page.getResult()) {
				obj.setRefundStatus("CLOSED");
				
				orderFacade.update(obj);
			}
		}
		/*JSONObject json = new JSONObject();
		json.put("success", true);
		json.put("msg", "关闭交易成功!");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/xml");
		response.getWriter().write(json.toString());*/
		return null;
	}
	@RequestMapping("/order/detail.do")
	public String detail(HttpServletRequest request, HttpServletResponse response) {
		String tid = request.getParameter("tid");
		TradeModel trade = tradeFacade.findById(tid);
		request.setAttribute("trade", trade);
		return "orderdetail";
	}
	@RequestMapping("/order/order.do")
	public String order(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String tid = request.getParameter("tid");
		TradeModel trade = tradeFacade.findById(tid);
		Page<OrderModel> page = new Page<OrderModel>(20);
		page = orderFacade.findByProperty("trade", trade,page);
		if (page.getResult() != null && page.getResult().size() > 0) {
			Document doc = new Document();
			Element rootElement = new Element("rows");
			doc.addContent(rootElement);
			Element totalElement = new Element("total");
			totalElement.setText(page.getResult().size() + "");
			rootElement.addContent(totalElement);
			for (OrderModel obj : page.getResult()) {

				Element childElement = new Element("record");
				Element id = new Element("id");
				id.setText(obj.getPid().toString());
				childElement.addContent(id);

				Element picPath = new Element("picPath");
				picPath.setText(obj.getPicPath());
				childElement.addContent(picPath);

				Element title = new Element("title");
				childElement.addContent(title);

				Element price = new Element("price");
				price.setText(obj.getPrice().toString());
				childElement.addContent(price);

				Element outerIid = new Element("outerIid");
				outerIid.setText(obj.getOuterIid());
				childElement.addContent(outerIid);

				/*Element colorName = new Element("colorName");
				colorName.setText(obj.getColorName());
				childElement.addContent(colorName);

				Element sizeName = new Element("sizeName");
				sizeName.setText(obj.getSizeName());
				childElement.addContent(sizeName);
*/
				Element num = new Element("num");
				num.setText(obj.getNum().toString());
				childElement.addContent(num);

				Element payment = new Element("payment");
				payment.setText(obj.getPayment().toString());
				childElement.addContent(payment);

				Element totalFee = new Element("totalFee");
				totalFee.setText(obj.getTotalFee().toString());
				childElement.addContent(totalFee);

				Element discountFee = new Element("discountFee");
				discountFee.setText(obj.getDiscountFee().toString());
				childElement.addContent(discountFee);

				Element adjustFee = new Element("adjustFee");
				adjustFee.setText(obj.getAdjustFee().toString());
				childElement.addContent(adjustFee);

				Element refundStatus = new Element("refundStatus");
				refundStatus.setText(obj.getRefundStatus());
				childElement.addContent(refundStatus);

				/*Element refundDesc = new Element("refundDesc");
				refundDesc.setText(obj.getRefundDesc());
				childElement.addContent(refundDesc);*/

				rootElement.addContent(childElement);
			}
			XMLOutputter xml = new XMLOutputter();
			response.setCharacterEncoding("UTF-8");
			response.setContentType("text/xml");
			response.getWriter().write(xml.outputString(doc));
			return null;
		}
		return null;
	}
	@RequestMapping("/order/updateOrder.do")
	public String updateOrder(HttpServletRequest request, HttpServletResponse response) throws TaobaoApiException, IOException {
		Long oid = Long.parseLong(request.getParameter("id"));
		String outerIid = request.getParameter("outerIid");
		String refundStatus = request.getParameter("refundStatus");
		String refundDesc = request.getParameter("refundDesc");

		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/xml");

		TradeModel trade = tradeFacade.findById(oid.toString());
		if (trade.getStatus().equals("WAIT_BUYER_CONFIRM_GOODS")) {
			/*JSONObject json = new JSONObject();
			json.put("success", false);
			json.put("errorMsg", "该订单商家已发货,不能修改该交易订单");
			response.getWriter().write(json.toString());*/
		}
		
		if (refundStatus.equals("CLOSED")) {
		/*	order.setRefundStatus(refundStatus);
			order.setRefundDesc(refundDesc);
			order.setRefundTime(new Date());
			orderFacade.update(order);
			
			trade.setPayment(trade.getPayment() - order.getPayment());
			trade.setTotalFee(trade.getTotalFee() - order.getTotalFee());
			Double df = Double.parseDouble(trade.getDiscountFee()) - order.getDiscountFee();
			trade.setDiscountFee(df.toString());
			trade.setAdjustFee(trade.getAdjustFee() - order.getAdjustFee());
			trade.setModified(new Date());
			tradeFacade.update(trade);
			
			JSONObject json = new JSONObject();
			json.put("success", true);
			json.put("msg", "修改订单退款状态成功");
			response.getWriter().write(json.toString());
			return null;*/
		}
		
		/*TaobaoUser tbuser = facade.findAll().get(0);
		CustomTaobaoClient customClient = new CustomTaobaoClient(tbuser.getAppKey(), tbuser.getAppSecret());
		SkusOutGetRequest skusOutGetRequest = new SkusOutGetRequest();
		skusOutGetRequest.setOuterId(outerIid);
		skusOutGetRequest.setFields("iid,sku_id,properties");
		SkusOutGetResponse skusOutGetResponse = customClient.skusOutGet(skusOutGetRequest, tbuser.getSessionKey(), tbuser.getTbAccount());
		System.out.println("修改订单款号("+outerIid+"):" + skusOutGetResponse.getBody());
		if (skusOutGetResponse.isSuccess()) {
			Sku sku = skusOutGetResponse.getSku();
			if (sku != null) {
				//验证用户输入款号正确
				order.setOuterIid(outerIid);
				// 分解商家编码14为 9款号 2 颜色 3 寸码
				order.setPlu(outerIid.substring(0, 9));
				order.setColorCode(outerIid.substring(9, 11));
				order.setSizeCode(outerIid.substring(11, 14));
				order.setSkuid(sku.getSkuId());
				TaobaoRestClient client = new TaobaoJsonRestClient(tbuser.getAppKey(), tbuser.getAppSecret());
				ItemGetRequest req = new ItemGetRequest();
				req.setFields("title,pic_path,cid,property_alias");
				req.setNumIid(sku.getIid());
				req.setNick(tbuser.getTbAccount());
				ItemGetResponse rsp = client.itemGet(req, tbuser.getSessionKey());
				if (rsp.isSuccess()) {
					Item item = rsp.getItem();
					order.setIid(item.getIid());
					order.setTitle(item.getTitle());
					order.setName(order.getTitle().substring(order.getTitle().indexOf("(") + 1, order.getTitle().indexOf(")")));
					order.setPicPath(item.getPicPath());
					
					// 设定获取标准SKU属性值
					ItemPropValuesGetRequest itemPropReq = new ItemPropValuesGetRequest();
					itemPropReq.setFields("name");
					itemPropReq.setCid(item.getCid());

					// 组装宝贝自定义属性组
					Map<String, String> aliasMap = TaobaoUtil.getPropertyAlias(item.getPropertyAlias());
					// 将Sku中的priperties 分解为 颜色值码与尺寸值码
					String[] properties = sku.getProperties().split(";");
					String colorName = "";
					String sizeName = "";
					if(properties.length >=2){
						colorName = aliasMap.get(properties[0]);
						sizeName = aliasMap.get(properties[1]);
					}else{
						colorName = aliasMap.get(properties[0]);
						sizeName = "均码";
					}
					if (colorName == null) {
						itemPropReq.setPvs(properties[0]);
						ItemPropValuesResponse itemPropRes = client.itemPropValuesGet(itemPropReq);
						if (itemPropRes.isSuccess()) {
							colorName = itemPropRes.getPropValues().get(0).getName();
						}
					}
					if (sizeName == null) {
						itemPropReq.setPvs(properties[1]);
						ItemPropValuesResponse itemPropRes = client.itemPropValuesGet(itemPropReq);
						if (itemPropRes.isSuccess()) {
							sizeName = TaobaoUtil.getSizeName(itemPropRes.getPropValues().get(0).getName());
						}
					}
					order.setColorName(colorName);
					order.setSizeName(sizeName);
					orderFacade.update(order);
					trade.setModified(new Date());
					tradeFacade.update(trade);
					
					JSONObject json = new JSONObject();
					json.put("success", true);
					json.put("msg", "修改订单款号成功");
					response.getWriter().write(json.toString());
					return null;
				}else{
					JSONObject json = new JSONObject();
					json.put("success", false);
					json.put("errorMsg", "宝贝不存在,可能已被删除,请查证");
					response.getWriter().write(json.toString());
					return null;
				}
			}else{
				JSONObject json = new JSONObject();
				json.put("success", false);
				json.put("errorMsg", "获取SKU对象时为NULL,请查证");
				response.getWriter().write(json.toString());
				return null;
			}
		}else{
			JSONObject json = new JSONObject();
			json.put("success", false);
			json.put("errorMsg", "您输入的款号出现重复,有2个或以上的宝贝设置同样的款号(款号不存在),请查证");
			response.getWriter().write(json.toString());
			return null;
		}*/
		return null;
	}
	@RequestMapping("/order/receiver.do")
	public String receiver(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String tid = request.getParameter("tid");
		String receiverState = request.getParameter("receiverState");
		String receiverCity = request.getParameter("receiverCity");
		String receiverDistrict = request.getParameter("receiverDistrict");
		String receiverAddress = request.getParameter("receiverAddress");
		String receiverZip = request.getParameter("receiverZip");
		String receiverMobile = request.getParameter("receiverMobile");
		String receiverPhone = request.getParameter("receiverPhone");
		String receiverName = request.getParameter("receiverName");

		TradeModel trade = tradeFacade.findById(tid);
		trade.setReceiverAddress(receiverAddress);
		trade.setReceiverCity(receiverCity);
		trade.setReceiverDistrict(receiverDistrict);
		trade.setReceiverMobile(receiverMobile);
		trade.setReceiverName(receiverName);
		trade.setReceiverPhone(receiverPhone);
		trade.setReceiverState(receiverState);
		trade.setReceiverZip(receiverZip);
		try {
			tradeFacade.update(trade);
		/*	JSONObject json = new JSONObject();
			json.put("success", true);
			json.put("msg", "保存收货人信息成功!");
			response.setCharacterEncoding("UTF-8");
			response.setContentType("text/xml");
			response.getWriter().write(json.toString());*/
			return null;
		} catch (Exception e) {
			/*JSONObject json = new JSONObject();
			json.put("success", false);
			json.put("errorMsg", "您输入的收货人信息有误,请查证!");
			response.setCharacterEncoding("UTF-8");
			response.setContentType("text/xml");
			response.getWriter().write(json.toString());*/
			return null;
		}
	}
}