<?xml version="1.0" encoding="UTF-8"?>
	<!--
		- DispatcherServlet application context for PetClinic's web tier.
	-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
				http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd">
	<!--
		- The controllers are autodetected POJOs labeled with the @Controller
		annotation.
	-->
	<context:annotation-config />
	<context:component-scan  base-package="com.xyz" >
	    <context:include-filter type="regex" expression=".client.*Service"/>
	    <context:include-filter type="regex" expression=".*.action.*"/>
	</context:component-scan>

	<!--
		- The form-based controllers within this application provide
		@RequestMapping - annotations at the type level for path mapping URLs
		and @RequestMapping - at the method level for request type mappings
		(e.g., GET and POST). - In contrast, ClinicController - which is not
		form-based - provides - @RequestMapping only at the method level for
		path mapping URLs. - - DefaultAnnotationHandlerMapping is driven by
		these annotations and is - enabled by default with Java 5+.
	-->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"
		p:order="1" >
	</bean>

	<!-- GWT SL 处理器 -->
    <!-- Factory for creating RPC wrappers that can serialise Hibernate managed objects -->
	<bean id="gileadRPCServiceExporterPrototype" class="org.gwtwidgets.server.spring.gilead.GileadRPCServiceExporter" scope="prototype">
		<property name="beanManager" ref="hibernateBeanManager"/>
		<!-- Use with dynamic proxy mode 
		<property name="usingProxyClassLoader" value="true"/>
		 -->
	</bean>
	
	<bean id="gileadRPCServiceExporterFactory" class="org.gwtwidgets.server.spring.gilead.GileadRPCServiceExporterFactory">
		<lookup-method name="create" bean="gileadRPCServiceExporterPrototype"/>
	</bean>
	
	<bean class="org.gwtwidgets.server.spring.GWTHandler" p:order="2" >
		<property name="serviceExporterFactory" ref="gileadRPCServiceExporterFactory"></property>
	</bean>

	<!--
		This bean processes annotated handler methods, applying
		PetClinic-specific PropertyEditors - for request parameter binding. It
		overrides the default AnnotationMethodHandlerAdapter. <bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="webBindingInitializer"> <bean
		class="org.springframework.samples.petclinic.web.ClinicBindingInitializer"/>
		</property> </bean>
	-->
	<!--
		- This bean resolves specific types of exceptions to corresponding
		logical - view names for error views. The default behaviour of
		DispatcherServlet - is to propagate all exceptions to the servlet
		container: this will happen - here with all other types of exceptions.
	-->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.web.servlet.PageNotFound">pageNotFound</prop>
				<prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
				<prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
			</props>
		</property>
	</bean>

	<!--
		- This view resolver delegates to the InternalResourceViewResolver and
		BeanNameViewResolver, - and uses the requested media type to pick a
		matching view. When the media type is 'text/html', - it will delegate
		to the InternalResourceViewResolver's JstlView, otherwise to the -
		BeanNameViewResolver. Note the use of the expression language to refer
		to the contentType - property of the vets view bean, setting it to
		'application/vnd.springsource.samples.petclinic+xml'. <bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes"> <map> <entry key="xml"
		value="#{vets.contentType}"/> <entry key="atom"
		value="#{visits.contentType}"/> </map> </property> <property
		name="order" value="0"/> </bean>
	-->
	<!--
		- The BeanNameViewResolver is used to pick up the visits view name
		(below). - It has the order property set to 2, which means that this
		will - be the first view resolver to be used after the delegating
		content - negotiating view resolver.
	-->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="2" />
	<!--

		- This bean configures the 'prefix' and 'suffix' properties of -
		InternalResourceViewResolver, which resolves logical view names -
		returned by Controllers. For example, a logical view name of "vets" -
		will be mapped to "/WEB-INF/jsp/vets.jsp".
	-->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/pages/" p:suffix=".jsp" p:order="1" >
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>
	<!-- bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"
		p:order="1">
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" >
				</bean>
			</list>
		</property>
	</bean> -->
	<!-- 资源文件 -->
	
</beans>
